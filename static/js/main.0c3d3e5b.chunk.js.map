{"version":3,"sources":["components/TitleRound.jsx","components/Contador.jsx","components/Header.jsx","App.js","serviceWorkerRegistration.js","index.js"],"names":["TitleRound","round","energie","className","alt","src","Contador","props","useState","energies","setEnergies","setRound","useEffect","console","log","onClick","e","Header","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0c3d3e5b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TitleRound = ({ round, energie }) => {\r\n  return (\r\n    <div className=\"container-title\">\r\n      <img\r\n        className=\"img\"\r\n        alt=\"energia\"\r\n        src=\"https://i.imgur.com/pmPjXRs.png\"\r\n      />\r\n      <h2>{energie}/10</h2>\r\n      <h1>Ronda {round}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleRound;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TitleRound from \"./TitleRound\";\r\n\r\nconst Contador = (props) => {\r\n  const [energies, setEnergies] = useState(3);\r\n\r\n  const [round, setRound] = useState(1);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Render\");\r\n  }, []);\r\n\r\n  const hadleSum = () => {\r\n    if (energies < 10) setEnergies((e) => e + 1);\r\n  };\r\n  const hadleRest = () => {\r\n    if (energies > 0) setEnergies((e) => e - 1);\r\n  };\r\n  const hadleRound = () => {\r\n    setRound((e) => e + 1);\r\n    if (energies <= 8) {\r\n      setEnergies((e) => e + 2);\r\n    } else if (energies < 10) {\r\n      setEnergies((e) => e + 1);\r\n    }\r\n  };\r\n  const hadleGame = () => {\r\n    setEnergies(3);\r\n    setRound(1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"contador\">\r\n      <TitleRound round={round} energie={energies} />\r\n      <div className=\"container-buttons\">\r\n        <button className=\"button-energie color-green\" onClick={hadleSum}>\r\n          +1 ENERGIA\r\n        </button>\r\n        <button className=\"button-energie color-red \" onClick={hadleRest}>\r\n          -1 ENERGIA\r\n        </button>\r\n        <button className=\"button-axie\" onClick={hadleRound}>\r\n          SIGUIENTE\r\n        </button>\r\n        <button className=\"button-axie\" onClick={hadleGame}>\r\n          REINICIAR\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contador;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <img className=\"logo\" alt=\"logo\" src=\"https://i.imgur.com/TFu95b5.png\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport Contador from \"./components/Contador\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contador />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}